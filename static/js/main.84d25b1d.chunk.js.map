{"version":3,"sources":["components/SingleCard.js","App.js","index.js"],"names":["SingleCard","card","handleChoice","flipped","disabled","className","src","alt","onClick","cardImages","matched","App","useState","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","useEffect","prevCards","map","resetTurn","setTimeout","prevTurns","shuffledCards","sort","Math","random","index","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAEe,SAASA,EAAT,GAAgE,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAQhE,OACE,qBAAKC,UAAU,OAAf,SACI,sBAAKA,UAAWF,EAAU,UAAW,GAArC,UACE,qBAAKE,UAAU,QAAQC,IAAKL,EAAKK,IAAKC,IAAI,eAC1C,qBAAKF,UAAU,OAAOC,IAAI,iBAAiBE,QAVjC,WACbJ,GACHF,EAAaD,IAQ0DM,IAAI,eCT/E,IAAME,EAAa,CACjB,CAAEH,IAAK,oBAAqBI,SAAS,GACrC,CAAEJ,IAAK,oBAAqBI,SAAS,GACrC,CAAEJ,IAAK,kBAAmBI,SAAS,GACnC,CAAEJ,IAAK,oBAAqBI,SAAS,GACrC,CAAEJ,IAAK,oBAAqBI,SAAS,GACrC,CAAEJ,IAAK,mBAAoBI,SAAS,IAoFvBC,MAjFf,WAEE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAkCJ,mBAAS,MAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAkCN,mBAAS,MAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAgCR,oBAAS,GAAzC,mBAAOR,EAAP,KAAiBiB,EAAjB,KAmBMnB,EAAe,SAACD,GACpBgB,EAAYG,EAAanB,GAAQiB,EAAajB,IAIhDqB,qBAAU,WACJL,GAAaE,IACfE,GAAY,GAERJ,EAAUX,MAAQa,EAAUb,KAE9BQ,GAAS,SAAAS,GACP,OAAOA,EAAUC,KAAI,SAAAvB,GAEnB,OAAIA,EAAKK,MAAQW,EAAUX,IAElB,2BAAIL,GAAX,IAAiBS,SAAS,IAGnBT,QAIbwB,KAEAC,YAAW,kBAAMD,MAAa,QAIjC,CAACR,EAAWE,IAIf,IAAMM,EAAY,WAChBP,EAAa,MACbE,EAAa,MACbJ,GAAS,SAAAW,GAAS,OAAIA,EAAW,KACjCN,GAAY,IAId,OACE,sBAAKhB,UAAU,MAAf,UACE,8CACA,wBAAQG,QA5DS,WAEnB,IAAMoB,EAAgB,UAAInB,EAAeA,GACtCoB,MAAK,kBAAMC,KAAKC,SAAW,MAC3BP,KAAI,SAACvB,EAAM+B,GAAP,mBAAC,eAAsB/B,GAAvB,IAA6BgC,GAAID,OAGxCd,EAAa,MACbE,EAAa,MAEbN,EAASc,GAETZ,EAAS,IAgDP,sBAEA,qBAAKX,UAAU,YAAf,SACCQ,EAAMW,KAAI,SAACvB,GAAD,OACX,cAAC,EAAD,CAA0BA,KAAMA,EAAMC,aAAcA,EAAcC,QAASF,IAASgB,GAAahB,IAASkB,GAAalB,EAAKS,QAASN,SAAUA,GAA9HH,EAAKgC,SAGtB,wCAAWlB,SCrFjBmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.84d25b1d.chunk.js","sourcesContent":["import \"./SingleCard.css\"\n\nexport default function SingleCard({ card, handleChoice, flipped, disabled }) {\n\nconst handleClick = () => {\n  if (!disabled) {\n    handleChoice(card)\n  } \n}\n\n  return (\n    <div className=\"card\">\n        <div className={flipped ? \"flipped\" :\"\"}>\n          <img className=\"front\" src={card.src} alt=\"card front\" />\n          <img className=\"back\" src=\"/img/cover.png\" onClick={handleClick} alt=\"cover\" />\n        </div>\n      </div>\n  )\n}\n\n\n","import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport SingleCard from \"./components/SingleCard\"\n\n// Card Images and match state\nconst cardImages = [\n  { src: \"/img/helmet-1.png\", matched: false },\n  { src: \"/img/potion-1.png\", matched: false },\n  { src: \"/img/ring-1.png\", matched: false },\n  { src: \"/img/scroll-1.png\", matched: false },\n  { src: \"/img/shield-1.png\", matched: false },\n  { src: \"/img/sword-1.png\", matched: false },\n];\n\nfunction App() {\n  // Hooks\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n  \n  // Shuffle cards function\n  const shuffleCards = () => {\n    // Create cards board\n    const shuffledCards = [...cardImages, ...cardImages]\n      .sort(() => Math.random() - 0.5)\n      .map((card, index) => ({ ...card, id: index }));\n\n    // Set choices to null\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    // Store the board in a state\n    setCards(shuffledCards);\n    // Set the turn value\n    setTurns(0);\n  };\n\n  // Define if it is first or second choice function\n  const handleChoice = (card) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card)\n  }\n\n  // Compare 2 selected cards when the choices are made\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true)\n      // If card matches\n      if (choiceOne.src === choiceTwo.src) {\n        // Iterate over the cards\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            //Find card that matches\n            if (card.src === choiceOne.src) {\n              // Assign true\n              return {...card, matched: true}\n              // To all the other cards\n            } else {\n              return card\n            }\n          })\n        })\n        resetTurn()\n      } else {\n        setTimeout(() => resetTurn(), 1000)\n        \n      }\n    }\n  }, [choiceOne, choiceTwo])\n  \n\n  // Reset function\n  const resetTurn = () => {\n    setChoiceOne(null)\n    setChoiceTwo(null)\n    setTurns(prevTurns => prevTurns +1)\n    setDisabled(false)\n  }\n \n\n  return (\n    <div className=\"App\">\n      <h1>Magic Memory</h1>\n      <button onClick={shuffleCards}>New Game</button>\n\n      <div className=\"card-grid\">\n      {cards.map((card) => (\n      <SingleCard key={card.id} card={card} handleChoice={handleChoice} flipped={card === choiceOne || card === choiceTwo || card.matched} disabled={disabled} />\n    ))}\n      </div>\n      <p>Turns: {turns}</p>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}